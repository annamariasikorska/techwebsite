---
import { getCollection, type CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import FormattedDate from '@/components/FormattedDate.astro';
import { truncate } from '@/utils/utils';

type Props = {
  posts?: CollectionEntry<'article' | 'project'>[];
  size?: number;
  variant?: 'small';
  type: 'articles' | 'projects';
};

export const prerender = false;
const defaultPosts = Astro.props.posts;
const variant = Astro.props.variant;
const type = Astro.props.type;

let collectionType: 'article' | 'project';

if (type === 'projects') {
  collectionType = 'project';
} else if (type === 'articles') {
  collectionType = 'article';
}

async function getPosts() {
  if (defaultPosts) {
    return defaultPosts;
  }

  if (collectionType) {
    const posts = (await getCollection(collectionType))
      .slice(0, Astro.props.size || 0)
      .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());

    return posts;
  }

  return [];
}

const posts = await getPosts() as CollectionEntry<'article' | 'project'>[];

---

<ul class="post-list">
  {
    posts && posts.map(post => (
      <li class="post" data-animation="fadeUp">
        <a class="post__link" href={`/${type}/${post.slug}/`}>
          <div class="post__text">
            <h3 class:list={['post__title', variant === 'small' && 'is-small']}>
              {post.data.title}
            </h3>
            <div class="post__info">
              <p class="post__date">
                <FormattedDate date={post.data.publishDate} />
              </p>

              {post.data.description && (
                <p class="post__summary">{truncate(post.data.description, 160)}</p>
              )}
            </div>
          </div>

          {post.data.heroImage && (
            <div class="post__thumbnail">
              <Image width={120} height={120} src={post.data.heroImage} alt="hero" loading="lazy" />
            </div>
          )}
        </a>
      </li>
    ))
  }
</ul>
<!-- <ul class="article-list">
  {
    posts.map((post, index) => (
      <li class="article-item" data-animation="fadeUp" data-delay={index < 4 ? 0.2 * index : 0}>
        <a class="article-item-link u-grid" href={`/articles/${post.slug}/`}>
          <h4 class="article-item-title">{post.data.title}</h4>

          <div class="article-item-date">
            <h6 class="article-item-info-head">/ Date</h6>
            <FormattedDate date={post.data.publishDate} />
          </div>

          {post.data.description && (
            <div class="article-item-summary">
              <h6 class="article-item-info-head">/ Summary</h6>
              {post.data.description}
            </div>
          )}
        </a>
      </li>
    ))
  }
</ul> -->

<style>
  .post-list {
    display: flex;
    flex-wrap: wrap;
    padding: 0;
    margin: 0;
    list-style-type: none;
  }

  .post {
    position: relative;
    width: 100%;
    max-width: 100%;

    &::before {
      position: absolute;
      top: 0;
      left: 0;
      width: 0;
      height: 1px;
      content: '';
      background-color: var(--colour-contrast);
      transition: width 0.4s;
    }

    &.is-passed {
      &::before {
        width: 100%;
      }
    }

    &:first-of-type {
      &::before {
        content: none;
      }
    }

    body.is-mobile & {
      &::before {
        width: 100%;
      }
    }

    &__title {
      flex-shrink: 0;
      grid-column: 1 /13;
      margin: 0;
      font-size: 56px;
      line-height: 1;
      color: var(--colour-contrast);

      @media (--screen-mc-max) {
        font-size: 40px;
      }

      @media (--screen-tb-max) {
        font-size: 28px;
      }
    }

    &__date {
      flex-shrink: 0;
      grid-column: 1 / 3;
      padding-top: 3px;
      margin: 0;
      font-size: var(--font-size-s);
    }

    &__summary {
      grid-column: 3 / 13;
      margin-bottom: 0;
      font-size: var(--font-size-default);

      @media (--screen-mc-max) {
        font-size: var(--font-size-m-mobile);
      }

      @media (--screen-tb-max) {
        font-size: var(--font-size-m-mobile);
      }
    }

    &__info {
      display: flex;
      gap: 32px;
      margin-top: 12px;

      @media (--screen-tb-max) {
        flex-direction: column;
        gap: 16px;
        font-size: var(--font-size-m-mobile);
      }
    }

    &__thumbnail {
      @media (--screen-tb-max) {
        position: absolute;
        top: 0;
        left: 0;
        height: 0;
        pointer-events: none;
        visibility: hidden;
        opacity: 0;
      }
    }

    &__link {
      display: flex;
      gap: 24px;
      align-items: center;
      justify-content: space-between;
      padding: var(--space-s) var(--grid-gutter-space-half);
      color: var(--colour-contrast);

      @media (--screen-tb-max) {
        display: block !important;
        padding: var(--space-s) var(--space-xs);
      }

      &:hover {
        color: var(--colour-font);
        background-color: var(--colour-primary);

        .post__title,
        .post__info-head {
          color: rgb(var(--accent));
        }
      }
    }
  }
</style>
